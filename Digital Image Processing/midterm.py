# -*- coding: utf-8 -*-
"""Midterm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IpiLGniUmsSrPt2X5khXbm5amIydKJTM
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt
#from google.colab.patches import cv2_imshow
from skimage.filters import  threshold_sauvola
import csv

img = cv2.imread('midterm.png')

gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) # or convert

# gray_blur = cv2.blur(gray,(3,3))

gray_blur = cv2.GaussianBlur(gray, (5, 5), 0)
_, inv = cv2.threshold(gray_blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# inv = cv2.adaptiveThreshold(gray_blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV,19,2)

img_equal = cv2.equalizeHist(inv)

kernel = np.ones((3,3), np.uint8)

erosion = cv2.erode(img_equal,kernel,iterations = 1)

closing = cv2.morphologyEx(erosion, cv2.MORPH_CLOSE, kernel,iterations = 1 )

cv2.imwrite('Morpho_processed.jpeg',closing)

# contour around noise 

thresh_sauvola = threshold_sauvola(gray_blur, window_size=3)
binary_sauvola = gray_blur > thresh_sauvola
binary_sauvola = binary_sauvola.astype(np.uint8)

for i in range(2):
  binary_sauvola = cv2.blur(binary_sauvola, (3,3))

binary_sauvola = binary_sauvola*255

cv2.imwrite('bianry_sauvola.jpeg',binary_sauvola)

# contour noise area


nlm = cv2.fastNlMeansDenoising(binary_sauvola,None,4,3,5)

cls = cv2.morphologyEx(nlm, cv2.MORPH_CLOSE,kernel)
op = cv2.morphologyEx(cls, cv2.MORPH_OPEN, kernel)

cv2.imwrite('NLM_processed.jpeg',op)

contours =  cv2.findContours(closing, cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)[0] + cv2.findContours(op, cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)[0] + cv2.findContours(binary_sauvola, cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)[0]


bounding=[]

for cnt in contours:
    (x,y,w,h) = cv2.boundingRect(cnt)
    cond = w*h
    if 750<cond<10000 and  0 < w < 50 and 0 < h < 150:
      bounding.append(cv2.boundingRect(cnt))


def non_max_suppression(boxes, probs=None, overlapThresh=0.3):			#src https://github.com/jrosebr1/imutils/blob/master/imutils/object_detection.py
	# if there are no boxes, return an empty list
	if len(boxes) == 0:
		return []

	# if the bounding boxes are integers, convert them to floats -- this
	# is important since we'll be doing a bunch of divisions
	if boxes.dtype.kind == "i":
		boxes = boxes.astype("float")

	# initialize the list of picked indexes
	pick = []

	# grab the coordinates of the bounding boxes
	x1 = boxes[:, 0]
	y1 = boxes[:, 1]
	x2 = boxes[:, 2]
	y2 = boxes[:, 3]

	# compute the area of the bounding boxes and grab the indexes to sort
	# (in the case that no probabilities are provided, simply sort on the
	# bottom-left y-coordinate)
	area = (x2 - x1 + 1) * (y2 - y1 + 1)
	idxs = y2

	# if probabilities are provided, sort on them instead
	if probs is not None:
		idxs = probs

	# sort the indexes
	idxs = np.argsort(idxs)

	# keep looping while some indexes still remain in the indexes list
	while len(idxs) > 0:
		# grab the last index in the indexes list and add the index value
		# to the list of picked indexes
		last = len(idxs) - 1
		i = idxs[last]
		pick.append(i)

		# find the largest (x, y) coordinates for the start of the bounding
		# box and the smallest (x, y) coordinates for the end of the bounding
		# box
		xx1 = np.maximum(x1[i], x1[idxs[:last]])
		yy1 = np.maximum(y1[i], y1[idxs[:last]])
		xx2 = np.minimum(x2[i], x2[idxs[:last]])
		yy2 = np.minimum(y2[i], y2[idxs[:last]])

		# compute the width and height of the bounding box
		w = np.maximum(0, xx2 - xx1 + 1)
		h = np.maximum(0, yy2 - yy1 + 1)

		# compute the ratio of overlap
		overlap = (w * h) / area[idxs[:last]]

		# delete all indexes from the index list that have overlap greater
		# than the provided overlap threshold
		idxs = np.delete(idxs, np.concatenate(([last],
			np.where(overlap > overlapThresh)[0])))

	# return only the bounding boxes that were picked
	return boxes[pick].astype("int")

boundingRect = [(x,y,x+w,y+h) for (x,y,w,h) in bounding] #convert 
boundingRect = non_max_suppression(np.array(boundingRect))

data = np.array([(x1,y1,x2-x1,y2-y1) for (x1,y1,x2,y2) in boundingRect])

for i in range(len(data)):
  if data[:,3][i] < 62:
    data[:,3][i] = 62
for i in range(len(data)):
  if data[:,2][i] < 29:
    data[:,2][i] = 29

data = [(x,y,x+w,y+h) for (x,y,w,h) in data]
data = non_max_suppression(np.array(data))

# test1 = img.copy()

# for (x1,y1,x2,y2) in boundingRect:
#     cv2.rectangle(test1, (x1,y1) , (x2, y2), (0,0,255))

# cv2.imwrite('img1.jpeg',test1)
# cv2.imshow('test1', test1)
test2 = img.copy()

for (x1,y1,x2,y2) in data:
    cv2.rectangle(test2, (x1,y1) , (x2, y2), (0,0,255))

cv2.imshow('test2', test2)
cv2.waitKey(0)
cv2.imwrite('final_img.jpeg',test2)


report_data = [(x1,y1,x2-x1,y2-y1) for (x1,y1,x2,y2) in data]
with open('output.txt', 'w') as f:
    csv.writer(f, delimiter=' ').writerows(report_data)